{
  "keywords": [
    "particubes",
    "game",
    "mobile",
    "scripting",
    "cube",
    "voxel",
    "world"
  ],
  "type": "Player",
  "extends": "Object",
  "description": "Player is a shortcut to `Client.Player`.\nRepresents the local Player.\n",
  "properties": [
    {
      "name": "Head",
      "type": "Shape",
      "description": "The [Shape] of the [Player]'s head."
    },
    {
      "name": "Body",
      "type": "Shape",
      "description": "The [Shape] of the [Player]'s body."
    },
    {
      "name": "LeftArm",
      "type": "Shape",
      "description": "The [Shape] of the [Player]'s left arm."
    },
    {
      "name": "RightArm",
      "type": "Shape",
      "description": "The [Shape] of the [Player]'s right arm."
    },
    {
      "name": "LeftLeg",
      "type": "Shape",
      "description": "The [Shape] of the [Player]'s left leg."
    },
    {
      "name": "RightLeg",
      "type": "Shape",
      "description": "The [Shape] of the [Player]'s right leg."
    },
    {
      "name": "BlockUnderneath",
      "type": "Block",
      "description": "Returns the block on which the Player is standing on."
    },
    {
      "name": "BlocksUnderneath",
      "type": "array",
      "description": "Returns an [array] of [Block]s the player is standing on",
      "samples": [
        {
          "code": "local blocks = Player.BlocksUnderneath\nfor index, value in ipairs(blocks) do \n    -- greenColorIndex is a block previously defined\n    local newBlock = Block(10) -- 10: BlockerProperties index\n    value:Replace(newBlock)\nend\n"
        }
      ]
    },
    {
      "name": "ID",
      "type": "number",
      "description": "Unique player ID for played game. A different ID can be attributed after reconnection."
    },
    {
      "name": "Username",
      "type": "string",
      "description": "Player's account username. Usernames are unique."
    },
    {
      "name": "UserID",
      "type": "string",
      "description": "Player's account identifier (ID). Identifiers are unique."
    },
    {
      "name": "Position",
      "type": "Number3",
      "description": "Absolute world position of the Player."
    },
    {
      "name": "Rotation",
      "type": "Number3",
      "description": "Player's rotation. (Y value is not considered)"
    },
    {
      "name": "Velocity",
      "type": "Number3",
      "description": "Player's velocity (speed + direction)."
    },
    {
      "name": "IsLocal",
      "type": "boolean",
      "description": "Indicates whether the [Player] object is the local `Player`.\nThis is only valid on the [Client], not on the [Server].\n"
    }
  ],
  "functions": [
    {
      "name": "CastRay",
      "argument-sets": [
        null,
        [
          {
            "name": "filterIn",
            "type": "CollisionGroups"
          }
        ],
        [
          {
            "name": "filterIn",
            "type": "Shape"
          }
        ],
        [
          {
            "name": "filterIn",
            "type": "nil"
          },
          {
            "name": "filterOut",
            "type": "Object"
          }
        ],
        [
          {
            "name": "filterIn",
            "type": "CollisionGroups"
          },
          {
            "name": "filterOut",
            "type": "Object"
          }
        ],
        [
          {
            "name": "filterIn",
            "type": "Shape"
          },
          {
            "name": "filterOut",
            "type": "Object"
          }
        ]
      ],
      "description": "Casts a ray from player's position, returns an [Impact] if it hits something, [nil] otherwise.\n\nðŸ’¡ Calls [Ray].[Cast](/reference/ray#functions-cast) under the hood. See [Ray].[Cast](/reference/ray#functions-cast) definition for more details about possible filters.\n",
      "return": [
        {
          "type": "Impact"
        }
      ],
      "samples": [
        {
          "code": "local impact = Player:CastRay()\nif impact ~= nil then\n  print(impact)\nend\n"
        }
      ]
    },
    {
      "name": "EquipBackpack",
      "coming-soon": true,
      "description": "Equips an [Item], [Shape] or [MutableShape] on the back of the [Player].\nYou can remove what's been equiped using [nil] argument\n",
      "argument-sets": [
        [
          {
            "name": "item",
            "type": "Item"
          }
        ],
        [
          {
            "name": "shape",
            "type": "Shape"
          }
        ],
        [
          {
            "name": "shape",
            "type": "MutableShape"
          }
        ],
        [
          {
            "type": "nil"
          }
        ]
      ]
    },
    {
      "name": "EquipHat",
      "coming-soon": true,
      "description": "Equips an Item, Shape or MutableShape on [Player]'s head.\nYou can remove what's been equiped using [nil] argument\n",
      "argument-sets": [
        [
          {
            "name": "Item",
            "type": "Item"
          }
        ],
        [
          {
            "name": "shape",
            "type": "Shape"
          }
        ],
        [
          {
            "name": "shape",
            "type": "MutableShape"
          }
        ],
        [
          {
            "type": "nil"
          }
        ]
      ]
    },
    {
      "name": "EquipLeftHand",
      "description": "Puts an [Item], [Shape] or [MutableShape] in [Player]'s left hand.\nYou can remove what's been equiped using [nil] argument\n",
      "argument-sets": [
        [
          {
            "name": "item",
            "type": "Item"
          }
        ],
        [
          {
            "name": "shape",
            "type": "Shape"
          }
        ],
        [
          {
            "name": "shape",
            "type": "MutableShape"
          }
        ],
        [
          {
            "type": "nil"
          }
        ]
      ]
    },
    {
      "name": "EquipRightHand",
      "description": "Puts an [Item], [Shape] or [MutableShape] in [Player]'s right hand.\nYou can remove what's been equiped using [nil] argument\n",
      "argument-sets": [
        [
          {
            "name": "item",
            "type": "Item"
          }
        ],
        [
          {
            "name": "shape",
            "type": "Shape"
          }
        ],
        [
          {
            "name": "shape",
            "type": "MutableShape"
          }
        ],
        [
          {
            "type": "nil"
          }
        ]
      ],
      "samples": [
        {
          "code": "Config = {\n  Items = { \"aduermael.rainbow_sword\" }\n}\n\nClient.OnStart = function()\n  Player:EquipRightHand(Items.aduermael.rainbow_sword)\n  -- or\n  local s = Shape(Items.aduermael.rainbow_sword)\n  Player:EquipRightHand(s)\n\n  Player:EquipRightHand(nil) -- unequips the sword\nend\n"
        }
      ]
    },
    {
      "name": "SwapHands",
      "description": "Swaps [Player]'s hand held items.\nIf one hand holds nothing, the [Item] switches hands.\n"
    },
    {
      "name": "SwingRight",
      "description": "Make [Player]'s right hand swing.\n"
    },
    {
      "name": "SwingLeft",
      "description": "Make [Player]'s left hand swing.\n"
    }
  ]
}