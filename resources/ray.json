{
  "keywords": [
    "particubes",
    "game",
    "mobile",
    "scripting",
    "cube",
    "voxel",
    "world"
  ],
  "type": "Ray",
  "creatable": true,
  "blocks": [
    {
      "text": "A ray has one origin point in the 3D scene and a direction. It returns potentials [Impact]s and the distance from the origin when that happens.\n"
    }
  ],
  "constructors": [
    {
      "description": "Creates a Ray with an origin and a direction.",
      "arguments": [
        {
          "name": "origin",
          "type": "Number3"
        },
        {
          "name": "direction",
          "type": "Number3"
        }
      ],
      "samples": [
        {
          "code": "local ray = Ray(Camera.Position, Camera.Forward)\nlocal impact = ray:Cast()\n"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "Cast",
      "argument-sets": [
        null,
        [
          {
            "name": "filterIn",
            "type": "CollisionGroups"
          }
        ],
        [
          {
            "name": "filterIn",
            "type": "Shape"
          }
        ],
        [
          {
            "name": "filterIn",
            "type": "nil"
          },
          {
            "name": "filterOut",
            "type": "Object"
          }
        ],
        [
          {
            "name": "filterIn",
            "type": "CollisionGroups"
          },
          {
            "name": "filterOut",
            "type": "Object"
          }
        ],
        [
          {
            "name": "filterIn",
            "type": "Shape"
          },
          {
            "name": "filterOut",
            "type": "Object"
          }
        ]
      ],
      "return": [
        {
          "type": "Impact"
        }
      ],
      "description": "Casts a ray and returns an [Impact] (can be [nil]).\n\nThe [Impact] contains information about what's been hit.\n\nBy default, a ray collides with all [CollisionGroups]. But filters can be set, if you want your ray to only collide with the [Map] for example. You can also filter out an [Object] of any kind.\n",
      "samples": [
        {
          "code": "Pointer.Down = function( pointerEvent )\n    local ray = Ray(pointerEvent.Position, pointerEvent.Direction)\n    local impact = ray:Cast()\n    if impact.Block ~= nil then\n      print(\"block hit:\", impact.Block)\n    end\nend\n\n-- cast rays from Camera's position to remove cubes in the map\nClient.Action2 = function()\n    local ray = Ray(Camera.Position, Camera.Forward)\n    ray:Cast(Map.CollisionGroups) -- only consider the map for collisions\n    if impact.Block ~= nil then\n      impact.Block:Remove()\n    end\nend\n\n-- cast ray down from Player's position to see\n-- if there's something under it:\nClient.Action3 = function()\n    local ray = Ray(Player.Position, {0, -1, 0})\n    ray:Cast(nil, Player) -- filter out Player to avoid direct impacts with it\n    if impact ~= nil then\n        print(\"found something under the player, distance:\", impact.Distance)\n    end\nend\n"
        }
      ]
    }
  ],
  "properties": [
    {
      "name": "Origin",
      "type": "Number3",
      "description": "The origin of the ray, in world coordinate system."
    },
    {
      "name": "Direction",
      "type": "Number3",
      "description": "The direction of the ray, in world coordinate system."
    },
    {
      "name": "FilterIn",
      "types": [
        "nil",
        "CollisionGroups",
        "Shape"
      ],
      "description": "Defines items colliding with the ray. [nil] by default, meaning the ray collides with everything.\n"
    },
    {
      "name": "FilterOut",
      "types": [
        "nil",
        "Object"
      ],
      "description": "[nil] by default. Can be set to an [Object] to filter it out from possible collisions.\n"
    }
  ]
}